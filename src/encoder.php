<?php
// Kage PHP Encoder - Analog of phpBolt

define('KAGE_KEY', 'aVerySecretEncryptionKeyOf32BytesForAES256!'); // 32 bytes for AES-256
define('KAGE_CIPHER_ALGO', 'aes-256-cbc');

/**
 * Encrypts the given data using AES-256-CBC.
 *
 * @param string $data The data to encrypt.
 * @param string $key The encryption key.
 * @param string $iv The initialization vector.
 * @return string The encrypted and Base64-encoded data, or false on failure.
 */
function kage_encrypt($data, $key, $iv) {
    // Encrypt the data
    $encrypted = openssl_encrypt($data, KAGE_CIPHER_ALGO, $key, OPENSSL_RAW_DATA, $iv);
    if ($encrypted === false) {
        return false; // Encryption failed
    }
    // Return Base64 encoded encrypted data
    return base64_encode($encrypted);
}

/**
 * Decrypts the given Base64-encoded data using AES-256-CBC.
 * This function is embedded in the protected file.
 *
 * @param string $encrypted_data_base64 The Base64-encoded encrypted data.
 * @param string $key The encryption key.
 * @param string $iv The initialization vector.
 * @return string The decrypted data, or false on failure.
 */
function kage_decrypt_runtime($encrypted_data_base64, $key, $iv) {
    // Decode from Base64
    $encrypted_data = base64_decode($encrypted_data_base64);
    if ($encrypted_data === false) {
        return false; // Base64 decoding failed
    }
    // Decrypt the data
    $decrypted = openssl_decrypt($encrypted_data, KAGE_CIPHER_ALGO, $key, OPENSSL_RAW_DATA, $iv);
    return $decrypted;
}

// --- Encoder Logic ---

// Check for command line arguments
if (!isset($argv[1]) || !isset($argv[2])) {
    echo "Usage: php encoder.php <input_file_path> <output_file_path>\n";
    echo "Example: php Kage/encoder.php Kage/source.php Kage/protected_source.php\n";
    exit(1);
}

$inputFilePath = $argv[1];
$outputFilePath = $argv[2];

// Read the original PHP file content
$originalCode = file_get_contents($inputFilePath);
if ($originalCode === false) {
    die("Error: Could not read input file '{$inputFilePath}'\n");
}

// Generate a unique IV for this encryption
$iv = openssl_random_pseudo_bytes(openssl_cipher_iv_length(KAGE_CIPHER_ALGO));
if ($iv === false) {
    die("Error: Could not generate IV\n");
}
$iv_base64 = base64_encode($iv); // Base64 encode IV for embedding

// Encrypt the original code
$encryptedCodeBase64 = kage_encrypt($originalCode, KAGE_KEY, $iv);
if ($encryptedCodeBase64 === false) {
    die("Error: Encryption failed\n");
}

// Construct the protected file content
// This is the "loader" part that will be put into the output file
$protectedFileContent = <<<PHP
<?php
// Kage Protected File - Generated by Kage/encoder.php

// Define the encryption key and cipher algorithm (must match encoder)
define('KAGE_KEY', 'aVerySecretEncryptionKeyOf32BytesForAES256!');
define('KAGE_CIPHER_ALGO', 'aes-256-cbc');

/**
 * Decrypts the given Base64-encoded data using AES-256-CBC.
 * This function is embedded in the protected file.
 *
 * @param string \$encrypted_data_base64 The Base64-encoded encrypted data.
 * @param string \$key The encryption key.
 * @param string \$iv The initialization vector.
 * @return string The decrypted data, or false on failure.
 */
function kage_decrypt_runtime(\$encrypted_data_base64, \$key, \$iv_base64) {
    \$encrypted_data = base64_decode(\$encrypted_data_base64);
    \$iv = base64_decode(\$iv_base64);
    if (\$encrypted_data === false || \$iv === false) {
        // Log error or handle securely in production environment
        // For demonstration, we'll just return false
        return false;
    }
    \$decrypted = openssl_decrypt(\$encrypted_data, KAGE_CIPHER_ALGO, \$key, OPENSSL_RAW_DATA, \$iv);
    return \$decrypted;
}

// The Initialization Vector for this specific file
\$kage_iv_encoded = '{$iv_base64}';

// The encrypted payload (Base64 encoded)
\$kage_encrypted_payload = '{$encryptedCodeBase64}';

// Attempt to decrypt the payload
\$kage_decrypted_code = kage_decrypt_runtime(\$kage_encrypted_payload, KAGE_KEY, \$kage_iv_encoded);

if (\$kage_decrypted_code === false) {
    die("Error: Failed to decrypt Kage protected code.\n");
}

// IMPORTANT SECURITY NOTE: eval() is DANGEROUS!
// It executes arbitrary PHP code. In a real-world scenario,
// you should consider stronger obfuscation or compiled solutions
// instead of direct eval() if code protection is critical.
// This is an analog demonstrating the "load and execute" concept.
eval(\$kage_decrypted_code);

// Ensure no further output or execution after the eval() call
return 0;
PHP;

// Write the protected content to the output file
if (file_put_contents($outputFilePath, $protectedFileContent) === false) {
    die("Error: Could not write output file '{$outputFilePath}'\n");
}

echo "Successfully encoded '{$inputFilePath}' to '{$outputFilePath}'\n";
echo "Note: The encryption key is hardcoded in the protected file. For true security, compiled extensions are recommended.\n";

?> 